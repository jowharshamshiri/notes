/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  SpoilerWidget: () => SpoilerWidget,
  default: () => BlindFoldPlugin,
  spoilerField: () => spoilerField
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var BlindFoldSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Open text").setDesc("a text displayed on the button to open the fold").addText(
      (text) => text.setPlaceholder("Reveal").setValue(this.plugin.settings.openText).onChange(async (value) => {
        this.plugin.settings.openText = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Close text").setDesc("a text displayed on the button to close the fold").addText(
      (text) => text.setPlaceholder("Close").setValue(this.plugin.settings.closeText).onChange(async (value) => {
        this.plugin.settings.closeText = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Enable inline spoiler").setDesc("enabling |% inline spoiler %|").addToggle(
      (text) => text.setValue(this.plugin.settings.enableSpoiler).onChange(async (value) => {
        this.plugin.settings.enableSpoiler = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/main.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var import_search = require("@codemirror/search");
var import_state2 = require("@codemirror/state");
var BlindFoldCodeProcessor = (self) => (source, el, ctx) => {
  const openText = self.settings.openText;
  const closeText = self.settings.closeText;
  const closebutton = el.createEl("button", { text: closeText, cls: ["btn", "blind"] });
  const openbutton = el.createEl("button", { text: openText, cls: "btn" });
  closebutton.addEventListener("click", () => {
    container.toggleClass("blind", true);
    closebutton.toggleClass("blind", true);
    openbutton.toggleClass("blind", false);
  });
  openbutton.addEventListener("click", () => {
    container.toggleClass("blind", false);
    closebutton.toggleClass("blind", false);
    openbutton.toggleClass("blind", true);
  });
  const container = el.createDiv();
  container.toggleClass(["blindfold", "blind"], true);
  let rowEl = container.createDiv();
  import_obsidian2.MarkdownRenderer.renderMarkdown(source, rowEl, ctx.sourcePath, self);
};
var DEFAULT_SETTINGS = {
  enableSpoiler: true,
  openText: "Open",
  closeText: "Close"
};
var SpoilerWidget = class extends import_view.WidgetType {
  constructor(s) {
    super();
    this.text = "";
    this.text = s;
  }
  toDOM(view) {
    const div = document.createElement("span");
    div.createEl("span", { text: this.text });
    div.addEventListener("click", () => {
      div.toggleClass("spoiler-blind", !div.hasClass("spoiler-blind"));
    });
    div.toggleClass("spoiler", true);
    div.toggleClass("spoiler-blind", true);
    return div;
  }
};
var SpoilerPlugin = class {
};
var spoilerPlugin = import_view.ViewPlugin.fromClass(SpoilerPlugin);
var spoilerField = import_state.StateField.define({
  create(state) {
    return import_view.Decoration.none;
  },
  update(oldState, transaction) {
    const builder = new import_state2.RangeSetBuilder();
    const find = new import_search.RegExpCursor(transaction.state.doc, "\\|%s*(.*?)s*%\\|");
    while (!find.next().done) {
      builder.add(
        find.value.from,
        find.value.to,
        import_view.Decoration.replace({
          widget: new SpoilerWidget(find.value.match[1])
        })
      );
    }
    return builder.finish();
  },
  provide(field) {
    return import_view.EditorView.decorations.from(field);
  }
});
var BlindFoldPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    await (0, import_obsidian2.loadMathJax)();
    this.registerMarkdownCodeBlockProcessor("blindfold", BlindFoldCodeProcessor(this));
    if (this.settings.enableSpoiler)
      this.registerEditorExtension([spoilerPlugin, spoilerField]);
    this.addSettingTab(new BlindFoldSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};

/* nosourcemap */